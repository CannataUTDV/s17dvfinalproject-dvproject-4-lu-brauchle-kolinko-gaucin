if(input$selectedBoxplotRegions == 'All') region_list5 <- input$selectedBoxplotRegions
else region_list5 <- append(list("Skip" = "Skip"), input$selectedBoxplotRegions)
}
)
df %>% dplyr::select(Region, Population, Happiness.Score, Total.employment.in.agriculture..thousands., Total.employment.in.industry..thousands., Total.employment.in.services..thousands.) %>% dplyr::filter(Region %in% input$selectedBoxplotRegions | input$selectedBoxplotRegions == "All")
if(input$selectedBoxplotRegions == 'All') region_list5 <- input$selectedBoxplotRegions
else region_list5 <- append(list("Skip" = "Skip"), input$selectedBoxplotRegions)
runApp('~/Spring 2017/Data Visualization/Project 5/02 Shiny/Shiny_V2')
runApp('~/Spring 2017/Data Visualization/Project 5/02 Shiny/Shiny_V2')
shinyServer(function(input, output) {
# These widgets are for the Crosstabs tab.
online1 = reactive({input$rb1})
KPI_Low = reactive({input$KPI1})
# Begin Crosstab Tab ------------------------------------------------------------------
df1 <- eventReactive(input$click1, {
if(online1() == "SQL") {
print("Getting from data.world")
query(
data.world(propsfile = "www/.data.world"),
dataset="brauchlen/s-17-edv-project-5", type="sql",
query="SELECT ProviderState, MeasureDescription,
avg(AdjustedScore) as avg_adjusted, avg(ExpectedScore) as avg_expected,
avg(AdjustedScore) / avg(ExpectedScore) as ratio,
case
when avg(AdjustedScore) / avg(ExpectedScore) < ? then '03 Low'
when avg(AdjustedScore) / avg(ExpectedScore) < ? then '02 Medium'
else '01 High'
end AS kpi
FROM rehospitalization
group by ProviderState, MeasureDescription
order by ProviderState",
queryParameters = list(KPI_Low(), KPI_Medium())
) }
else {
print("Getting from csv")
file_path = "www/rehospitalization.csv"
df2 <- readr::read_csv(file_path)
df2_1 <- df2 %>%
dplyr::select(ProviderState, MeasureDescription, AdjustedScore, ExpectedScore)
na2zero <- function (x) {
x[is.na(x)] <- 0
return(x)}
measures <- c("ExpectedScore", "AdjustedScore")
if( length(measures) > 1) {
for(m in measures) {
df2_1[m] <- data.frame(lapply(df2_1[m], na2zero))
df2_1[m] <- data.frame(lapply(df2_1[m], function(x) as.numeric(as.character(x))))}}
df2_1 %>%
dplyr::group_by(ProviderState, MeasureDescription) %>%
dplyr::summarise(avg_adjusted = mean(AdjustedScore),
avg_expected = mean(ExpectedScore),
ratio = mean(AdjustedScore)/mean(ExpectedScore),
kpi = if_else(ratio <= KPI_Low(), '03 Low',
if_else(ratio <= KPI_Medium(), '02 Medium', '01 High'))) %>%
dplyr::arrange(ProviderState)
}
})
output$data1 <- renderDataTable({DT::datatable(df1(), rownames = FALSE,
extensions = list(Responsive = TRUE, FixedHeader = TRUE))})
output$plot1 <- renderPlot({ggplot(df1()) +
geom_text(aes(x=MeasureDescription, y=ProviderState, label=avg_adjusted), size=6) +
geom_tile(aes(x=MeasureDescription, y=ProviderState, fill=kpi), alpha=0.50)})
})
names(df2)
df2%>%
dplyr::group_by(Country) %>%
dplyr::summarise(ratio_agr =Total.employment.in.agriculture..thousands./Population,
ratio_ind = Total.employment.in.industry..thousands./Population,
ratio_serv = Total.employment.in.services..thousands./Population) %>%
dplyr::arrange(Country)
df2%>%
dplyr::group_by(Country) %>%
dplyr::summarise(ratio_agr = (Total.employment.in.agriculture..thousands./Population),
ratio_ind = (Total.employment.in.industry..thousands./Population),
ratio_serv = (Total.employment.in.services..thousands./Population)) %>%
dplyr::arrange(Country)
df2%>% dplyr::summarise(ratio_agr = (Total.employment.in.agriculture..thousands./Population),
ratio_ind = (Total.employment.in.industry..thousands./Population),
ratio_serv = (Total.employment.in.services..thousands./Population)) %>%
dplyr::arrange(Country)
df2%>% dplyr::summarise(ratio_agr = avg(Total.employment.in.agriculture..thousands./Population),
ratio_ind = avg(Total.employment.in.industry..thousands./Population),
ratio_serv = avg(Total.employment.in.services..thousands./Population)) %>%
dplyr::arrange(Country)
names(df2)
df2%>% dplyr::summarise(ratio_agr = mean(Total.employment.in.agriculture..thousands./Population),
ratio_ind = mean(Total.employment.in.industry..thousands./Population),
ratio_serv = mean(Total.employment.in.services..thousands./Population)) %>%
dplyr::arrange(Country)
df2%>% dplyr::summarise(ratio_agr = mean(Total.employment.in.agriculture..thousands./Population),
ratio_ind = mean(Total.employment.in.industry..thousands./Population),
ratio_serv = mean(Total.employment.in.services..thousands./Population))
df2 <- read.csv("https://query.data.world/s/1bf1rqx0f351otahiiji5vy6q",header=T);
names(df2)
df2%>%
dplyr::group_by(Country) %>%
dplyr::summarise(ratio_agr = (Total.employment.in.agriculture..thousands./Population),
ratio_ind = (Total.employment.in.industry..thousands./Population),
ratio_serv = (Total.employment.in.services..thousands./Population)) %>%
dplyr::arrange(Country)
df2%>%
dplyr::group_by(Region) %>%
dplyr::summarise(ratio_agr = (Total.employment.in.agriculture..thousands./Population),
ratio_ind = (Total.employment.in.industry..thousands./Population),
ratio_serv = (Total.employment.in.services..thousands./Population)) %>%
dplyr::arrange(Region)
df2%>%
dplyr::group_by(Region) %>%
dplyr::mutate(ratio_agr = (Total.employment.in.agriculture..thousands./Population),
ratio_ind = (Total.employment.in.industry..thousands./Population),
ratio_serv = (Total.employment.in.services..thousands./Population)) %>%
dplyr::arrange(Region)
View(df2)
df2%>%
dplyr::group_by(Region) %>%
dplyr::mutate(ratio_agr = (Total.employment.in.agriculture..thousands./Population),
ratio_ind = (Total.employment.in.industry..thousands./Population),
ratio_serv = (Total.employment.in.services..thousands./Population)) %>%
dplyr::arrange(Region)
table(df2$ratio_ind)
df2%>%
dplyr::group_by(Region) %>%
dplyr::mutate(ratio_agr = (Total.employment.in.agriculture..thousands./Population))
mutate(df2, ratio_agr = (Total.employment.in.agriculture..thousands./Population))
View(df2)
mutate(df2, ratio_agr = (Total.employment.in.agriculture..thousands./Population))
mutate(df2, ratio_ind =  (Total.employment.in.industry..thousands./Population))
mutate(df2,  ratio_serv = (Total.employment.in.services..thousands./Population))
mutate(df2, ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population))
table(df2$ratio_ind)
View(df2)
mutate(df2, ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population))
View(df2)
View(df2$ratio_ind)
mutate(df2, ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population))
mutate(df2, ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population))
df2 <- mutate(df2, ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population))
View(df2)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
df <- mutate(df2, ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population))
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
names(df)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
library(reshape2)
df.m <- melt(df, id.var = "Label")
df.m <- melt(df, id.var = "Region")
df <- melt(df, id.var = "Region")
server <- function(input, output) {
output$plot1 <- renderPlot({
ggplot(df) +  geom_boxplot(aes(x=Region, y=ratio_ind, colour=Income.Class), size=.5) + guides(size=FALSE)
})
output$plot2 <- renderPlot({
brush = brushOpts(id="plot_brush", delayType = "throttle", delay = 30)
bdf=brushedPoints(df, input$plot_brush)
#View(bdf)
if( !is.null(input$plot_brush) ) {
df %>% dplyr::filter(Region %in% bdf[, "Region"]) %>%  ggplot() +geom_boxplot(aes(x=Region, y=ratio_ind, colour=Income.Class), size = .5) + guides(size=FALSE)
}
})
}
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
df <- melt(df, id.var = "Region")
df
View(df)
source('~/Spring 2017/Data Visualization/DrCannata/02 Grammar of Graphics with R and ggplot2/Plotting Function Example.R', echo=TRUE)
source('~/Spring 2017/Data Visualization/DrCannata/02 Grammar of Graphics with R and ggplot2/Plotting Function Example.R', echo=TRUE)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
df <- mutate(df2, ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population))
tdf1 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)
tdf2 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)
regions = bind_cols(tdf1, tdf2)
region_list <- as.list(regions$D, regions$R)
region_list <- append(list("All" = "All"), region_list)
region_list5 <- region_list
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
df <- read.csv("https://query.data.world/s/6v1xt64l1z4r2k2qf1i80ql0p",header=T);
tdf1 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)
tdf2 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)
regions = bind_cols(tdf1, tdf2)
df <- read.csv("https://query.data.world/s/6v1xt64l1z4r2k2qf1i80ql0p",header=T);
df <- read.csv("https://query.data.world/s/6v1xt64l1z4r2k2qf1i80ql0p",header=T);
tdf1 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)
tdf2 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)
regions = bind_cols(tdf1, tdf2)
boxplotdata <- eventReactive(input$click1,{
query(
data.world(propsfile = ".data.world"),
dataset="chriswongwr/s-17-dv-final-project", type="sql",
query="SELECT *
FROM US_Companies
INNER JOIN LargestIndustry ON US_Companies.abbreviation = LargestIndustry.abbreviation
INNER JOIN Region ON LargestIndustry.state = Region.State"
) %>% dplyr::filter(.,income_tax_paid >= input$tax1[1],income_tax_paid <= input$tax1[2])
})
output$state <-renderUI({
statelist <- as.data.frame(boxplotdata())$abbreviation
statelist[51] <- ''
selectInput("chooseState", "filter single state:", sort(statelist), multiple = FALSE)
})
df <- read.csv("https://query.data.world/s/6v1xt64l1z4r2k2qf1i80ql0p",header=T);
df <- read.csv("https://query.data.world/s/1bf1rqx0f351otahiiji5vy6q",header=T);
runApp('~/Spring 2017/Data Visualization/Project4/02 Shiny')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Scatterplot')
df_bp <- eventReactive(input$click1, {
df %>% dplyr::mutate( mutate(df2, ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population)))
})
df <- read.csv("https://query.data.world/s/6v1xt64l1z4r2k2qf1i80ql0p",header=T);
df_bp <- eventReactive(input$click1, {
df %>% dplyr::mutate( mutate(df2, ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population)))
})
2+2
df <- read.csv("https://query.data.world/s/6v1xt64l1z4r2k2qf1i80ql0p",header=T);
df_bp <- eventReactive(input$click1, {
df %>% dplyr::mutate( mutate(df2, ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population)))
})
output$plot1 <- renderPlotly({
p<- ggplot(df_bp()) +
theme(axis.text.x=element_text(size=16, vjust=0.5)) +
theme(axis.text.y=element_text(size=16, hjust=0.5)) +
geom_boxplot(aes(x=victory_margin, y=Unemployment, fill=victory_margin)) +
labs(title="Unemployment by Victory Margin", y="Unemployment (%)", x="Victory Type")
ggplotly(p)
})
View(df)
library(shiny)
library(shiny)
require(dplyr)
require(ggplot2)
require(RCurl)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
print("Getting Regions from csv")
df <- read.csv("https://query.data.world/s/6v1xt64l1z4r2k2qf1i80ql0p",header=T);
tdf1 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)
tdf2 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)
regions = bind_cols(tdf1, tdf2)
region_list <- as.list(regions$D, regions$R)
region_list <- append(list("All" = "All"), region_list)
region_list5 <- region_list
region_list <- append(list("All" = "All"), region_list)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
df2 %>% dplyr::mutate(ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population))
View(df2)
tdf1 = df2 %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)
tdf2 = df2 %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)
regions = bind_cols(tdf1, tdf2)
region_list <- as.list(regions$D, regions$R)
region_list <- append(list("All" = "All"), region_list)
View(regions)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
dfbp2 <- eventReactive(c(input$click5, input$boxSalesRange1), {
dfbp1() %>% dplyr::filter(Happiness.Score >= input$boxSalesRange1[1] & Happiness.Score <= input$boxSalesRange1[2]) # %>% View()
})
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
print("Getting Regions from csv")
df <- read.csv("https://query.data.world/s/6v1xt64l1z4r2k2qf1i80ql0p",header=T);
df2 <- df %>% dplyr::mutate(ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population))
tdf1 = df2 %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)
tdf2 = df2 %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)
regions = bind_cols(tdf1, tdf2)
region_list <- as.list(regions$D, regions$R)
region_list <- append(list("All" = "All"), region_list)
shinyServer(function(input, output) {
# These widgets are for the Box Plots tab.
online5 = reactive({input$rb5})
output$boxplotRegions <- renderUI({selectInput("selectedBoxplotRegions", "Choose Regions:",
region_list5, multiple = TRUE, selected='All') })
#begin boxplot
dfbp1 <- eventReactive(input$click5, {
if(input$selectedBoxplotRegions == 'All') region_list5 <- input$selectedBoxplotRegions
else region_list5 <- append(list("Skip" = "Skip"), input$selectedBoxplotRegions)
df2 %>% dplyr::select(Happiness.Score, Population, Region, ratio_agr, ratio_ind, ratio_serv, Income.Class) %>% dplyr::filter(Region %in% input$selectedBoxplotRegions | input$selectedBoxplotRegions == "All") # %>% View()
}
)
output$boxplotData1 <- renderDataTable({DT::datatable(dfbp1(), rownames = FALSE,
extensions = list(Responsive = TRUE,
FixedHeader = TRUE)
)
})
dfbp2 <- eventReactive(c(input$click5, input$boxSalesRange1), {
dfbp1() %>% dplyr::filter(Happiness.Score >= input$boxSalesRange1[1] & Happiness.Score <= input$boxSalesRange1[2]) # %>% View()
})
# %>% View()
output$boxplotPlot1 <- renderPlotly({
#View(dfbp3())
p <- ggplot(dfbp2()) +
geom_boxplot(aes(x=Region, y=ratio_agr, colour=Income.Class)) +
ylim(0, input$boxSalesRange1[2]) +
theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))
ggplotly(p)
})
})
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
df2 %>% dplyr::select(Happiness.Score, Income.Class, Region, ratio_agr) %>% dplyr::filter(Region %in% input$selectedBoxplotRegions | input$selectedBoxplotRegions == "All") # %>% View()
shinyServer(function(input, output) {
# These widgets are for the Box Plots tab.
online5 = reactive({input$rb5})
output$boxplotRegions <- renderUI({selectInput("selectedBoxplotRegions", "Choose Regions:",
region_list5, multiple = TRUE, selected='All') })
dfbp1 <- eventReactive(input$click5, {
if(input$selectedBoxplotRegions == 'All') region_list5 <- input$selectedBoxplotRegions
else region_list5 <- append(list("Skip" = "Skip"), input$selectedBoxplotRegions)
df2 %>% dplyr::select(Happiness.Score, Income.Class, Region, ratio_agr) %>% dplyr::filter(Region %in% input$selectedBoxplotRegions | input$selectedBoxplotRegions == "All") # %>% View()
})
output$boxplotData1 <- renderDataTable({DT::datatable(dfbp1(), rownames = FALSE,
extensions = list(Responsive = TRUE,
FixedHeader = TRUE)
)
})
dfbp2 <- eventReactive(c(input$click5, input$boxSalesRange1), {
dfbp1() %>% dplyr::filter(Happiness.Score >= input$boxSalesRange1[1] & Happiness.Score <= input$boxSalesRange1[2]) # %>% View()
})
dfbp3 <- eventReactive(c(input$click5, input$range5a), {
dfbp2() %>% dplyr::filter(lubridate::year(Order_Date) == as.integer(input$range5a) & lubridate::quarter(Order_Date) == (4 * (input$range5a - as.integer(input$range5a))) + 1) %>% dplyr::arrange(desc(Order_Date)) # %>% View()
})
output$boxplotPlot1 <- renderPlotly({
#View(dfbp3())
p <- ggplot(dfbp3()) +
geom_boxplot(aes(x=Category, y=Sales, colour=Region)) +
ylim(0, input$boxSalesRange1[2]) +
theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))
ggplotly(p)
})
}
)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
print("Getting Regions from csv")
df <- read.csv("https://query.data.world/s/6v1xt64l1z4r2k2qf1i80ql0p",header=T);
df2 <- df %>% dplyr::mutate(ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population))
tdf1 = df2 %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)
tdf2 = df2 %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)
regions = bind_cols(tdf1, tdf2)
region_list <- as.list(regions$D, regions$R)
region_list <- append(list("All" = "All"), region_list)
shinyServer(function(input, output) {
# These widgets are for the Box Plots tab.
online5 = reactive({input$rb5})
output$boxplotRegions <- renderUI({selectInput("selectedBoxplotRegions", "Choose Regions:",
region_list5, multiple = TRUE, selected='All') })
dfbp1 <- eventReactive(input$click5, {
if(input$selectedBoxplotRegions == 'All') region_list5 <- input$selectedBoxplotRegions
else region_list5 <- append(list("Skip" = "Skip"), input$selectedBoxplotRegions)
df2 %>% dplyr::select(Happiness.Score, Income.Class, Region, ratio_agr) %>% dplyr::filter(Region %in% input$selectedBoxplotRegions | input$selectedBoxplotRegions == "All") # %>% View()
})
output$boxplotData1 <- renderDataTable({DT::datatable(dfbp1(), rownames = FALSE,
extensions = list(Responsive = TRUE,
FixedHeader = TRUE)
)
})
dfbp2 <- eventReactive(c(input$click5, input$boxSalesRange1), {
dfbp1() %>% dplyr::filter(Happiness.Score >= input$boxSalesRange1[1] & Happiness.Score <= input$boxSalesRange1[2]) # %>% View()
})
output$boxplotPlot1 <- renderPlotly({
#View(dfbp3())
p <- ggplot(dfbp3()) +
geom_boxplot(aes(x=Category, y=Sales, colour=Region)) +
ylim(0, input$boxSalesRange1[2]) +
theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))
ggplotly(p)
})
# View()
})
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
df <- read.csv("https://query.data.world/s/6v1xt64l1z4r2k2qf1i80ql0p",header=T);
df2 <- df %>% dplyr::mutate(ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population))
View(df2)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
df <- read.csv("https://query.data.world/s/6v1xt64l1z4r2k2qf1i80ql0p",header=T);
df <- read.csv("https://query.data.world/s/6v1xt64l1z4r2k2qf1i80ql0p",header=T);
df2 <- df %>% dplyr::mutate(ratio_agr = (Total.employment.in.agriculture..thousands./Population),ratio_ind =  (Total.employment.in.industry..thousands./Population), ratio_serv = (Total.employment.in.services..thousands./Population))
tdf1 = df2 %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)
tdf2 = df2 %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)
regions = bind_cols(tdf1, tdf2)
}
region_list <- as.list(regions$D, regions$R)
region_list <- append(list("All" = "All"), region_list)
region_list5 <- region_list
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/boxplot atempt2')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/another attempt lol')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
require(plotly)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
dfmelt <- melt(df2)
View(regions)
View(dfmelt)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
dfmelt <- melt(df2, Region, ratio_agr, rato_ind, ratio_serv, Happiness.Score, Income.Class)
View(dfmelt)
dfmelt<- melt(df2, Region, ratio_agr, rato_ind, ratio_serv, Happiness.Score, Income.Class)
View(df)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
dfmelt<- melt(df2, measure.vars(Region, ratio_agr, rato_ind, ratio_serv, Happiness.Score, Income.Class))
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
dfmelt<- melt(df2, Region, ratio_agr, rato_ind, ratio_serv, Happiness.Score, Income.Class)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
dfmelt<- melt(df2, id = c('Region', 'ratio_agr', 'rato_ind', 'ratio_serv', 'Happiness.Score', 'Income.Class'))
df2 <- df %>% dplyr::mutate(ratio_agr = (Total.employment.in.agriculture..thousands.*1000/Population),ratio_ind =  (Total.employment.in.industry..thousands.*1000/Population), ratio_serv = (Total.employment.in.services..thousands.*1000/Population))
dfmelt<- melt(df2, id = c('Region', 'ratio_agr', 'rato_ind', 'ratio_serv', 'Happiness.Score', 'Income.Class'))
dfmelt<- melt(df2, id = c('Region', 'ratio_agr', 'ratio_ind', 'ratio_serv', 'Happiness.Score', 'Income.Class'))
View(dfmelt)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
View(df2)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
install.packages("gridExtra")
require(gridExtra)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
install.packages("cowplot")
require(cowplot)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Scatterplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Scatterplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
df2 <- df %>% dplyr::mutate(ratio_agr = (Total.employment.in.agriculture..thousands.*1000/Population),ratio_ind =  (Total.employment.in.industry..thousands.*1000/Population), ratio_serv = (Total.employment.in.services..thousands.*1000/Population)) %>% dplyr::filter(Income.Class != '')
tdf1 = df2 %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Scatterplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
View(df2)
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Boxplot')
source("../01 Data/preETL_happiness_jobs.R")
source("../01 Data/preETL_WorldHappiness.R")
source("../CSVs/preETL_WorldHappiness.R")
setwd("~/Spring 2017/Data Visualization")
source("/CSVs/preETL_WorldHappiness.R")
source("CSVs/preETL_WorldHappiness.R")
source("CSVs/preETL_WorldHappiness.csv")
source("CSVs/preETL_WorldHappiness.csv")
source("CSVs/PreETL_WorldHappiness.csv")
source("CSVs/PreETL_WorldHappiness.csv")
source("../01 Data/R_ETL.for.rehospitalization.data.R")
setwd("~/Spring 2017/Data Visualization")
source("../01 Data/R_ETL.for.rehospitalization.data.R")
setwd("~/Spring 2017/Data Visualization/Project 5")
setwd("~/Spring 2017/Data Visualization/Project 5/00 Doc")
source("../01 Data/R_ETL.for.rehospitalization.data.R")
setwd("~/Spring 2017/Data Visualization")
source("../01 Data/R_ETL.for.rehospitalization.data.R")
source("../01 Data/R_ETL.for.rehospitalization.data.R")
source("../01 Data/R_ETL_World_Happiness.data.R")
setwd("~/Spring 2017/Data Visualization")
source("../01 Data/R_ETL_World_Happiness.data.R")
source("../01 Data/R_ETL_World_Happiness.R")
sessionInfo()
setwd("~/Spring 2017/Data Visualization")
source("../01 Data/R_ETL_World_Happiness.R")
source("../01 Data/R_ETL_World_Happiness.R")
file_path = "../../CSVs/PreETL_WorldHappiness.csv"
file_path = "../../CSVs/PreETL_WorldHappiness.csv"
happiness <- readr::read_csv(file_path)
file_path = "CSVs/PreETL_WorldHappiness.csv"
source('~/Spring 2017/Data Visualization/Final Project/01 Data/R_ETL_World_Happiness.R', echo=TRUE)
source('~/Spring 2017/Data Visualization/Final Project/01 Data/R_ETL_World_Happiness.R', echo=TRUE)
source('~/Spring 2017/Data Visualization/Final Project/01 Data/R_ETL_World_Happiness.R', echo=TRUE)
source("../01 Data/R_ETL_World_Happiness.R")
setwd("~/Spring 2017/Data Visualization/Final Project/00 Doc")
source('~/Spring 2017/Data Visualization/Final Project/01 Data/R_ETL_World_Happiness.R', echo=TRUE)
source("../01 Data/R_ETL_World_Happiness.R")
source("../01 Data/R_ETL_GET_status_sector_2012.R")
df <- read.csv("https://query.data.world/s/1bf1rqx0f351otahiiji5vy6q",header=T);
View(df)
df <- read.csv("https://query.data.world/s/1bf1rqx0f351otahiiji5vy6q",header=T);
View(df)
names(df)
names(df) <- gsub(" ", "_", names(df))
names(df)
df <- read.csv("https://query.data.world/s/1bf1rqx0f351otahiiji5vy6q",header=T);
View(df)
df <- read.csv("https://query.data.world/s/1bf1rqx0f351otahiiji5vy6q",header=T);
print(df)
names(df)
source("../01 Data/R_ETL_GET_status_sector_2012.R")
source("../01 Data/R_ETL_GET_status_sector_2012.R")
runApp('~/Spring 2017/Data Visualization/Final Project/03 Shiny/Scatterplot')
