{
    "collab_server" : "",
    "contents" : "# server.R\nrequire(ggplot2)\nrequire(dplyr)\nrequire(shiny)\nrequire(shinydashboard)\nrequire(data.world)\nrequire(readr)\nrequire(DT)\nrequire(leaflet)\nrequire(plotly)\nrequire(lubridate)\n\nonline0 = TRUE\n\n# Server.R structure:\n#   Queries that donâ€™t need to be redone\n#   shinyServer\n#   widgets\n#   tab specific queries and plotting\n\n# select list in the Boxplots -> Simple Boxplot tab, and Barcharts -> Barchart with Table Calculation tab.\nif(online0) {\n  regions = query(\n    data.world(propsfile = \"www/.data.world\"),\n    dataset=\"kolinkodm/s-17-dv-final-project\", type=\"sql\",\n    query=\"select distinct Region as D, Region as R\n    from status_sector_pop_income\n    order by 1\"\n  ) # %>% View()\n} else {\n  print(\"Getting Regions from csv\")\n  file_path = \"../../../CSVs/status_sector_pop_income.csv\"\n  df <- readr::read_csv(file_path) \n  tdf1 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)\n  tdf2 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)\n  regions = bind_cols(tdf1, tdf2)\n}\nregion_list <- as.list(regions$D, regions$R)\nregion_list <- append(list(\"All\" = \"All\"), region_list)\n#region_list5 <- region_list\n\n# The following queries are for the Barcharts -> High Discount Orders tab data.\n# if(online0) {\n# # Step 1:\n#   highDiscounts <- query(\n#   data.world(propsfile = \"www/.data.world\"),\n#   dataset=\"cannata/superstoreorders\", type=\"sql\",\n#   query=\"\n#   SELECT distinct Order_Id, sum(Discount) as sumDiscount, sum(Sales) as\n#   sumSales\n#   FROM SuperStoreOrders\n#   where Region != 'International'\n#   group by Order_Id\n#   having sum(Discount) >= .3\"\n# ) # %>% View()\n#   # View(highDiscounts )\n# \n# # Step 2\n#   highDiscountCustomers <- query(\n#     data.world(propsfile = \"www/.data.world\"),\n#     dataset=\"cannata/superstoreorders\", type=\"sql\",\n#     query=\"\n#     SELECT distinct Customer_Name, City, State, Order_Id\n#     FROM SuperStoreOrders\n#     where Order_Id in\n#     (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n#     order by Order_Id\",\n#     queryParameters = highDiscounts$Order_Id\n#   ) # %>% View()\n#     # View(highDiscountCustomers)\n#     \n# # Step 3\n#     stateAbreviations <- query(\n#       data.world(propsfile = \"www/.data.world\"),\n#       dataset=\"cannata/superstoreorders\", type=\"sql\",\n#       query=\"SELECT distinct name as State, abbreviation as Abbreviation\n#       FROM markmarkoh.`us-state-table`.`state_table.csv/state_table`\n#       where name in\n#       (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n#       order by name\",\n#       queryParameters = highDiscountCustomers$State\n#     ) # %>% View()\n#     # View(stateAbreviations )\n#     \n# # Step 4\n#     highDiscountCustomers2 <- left_join(highDiscountCustomers,\n#                                         stateAbreviations, by=\"State\") # %>% View()\n#     # View(highDiscountCustomers2)\n#     \n# # Step 5\n#     longLat <- query(\n#       data.world(propsfile = \"www/.data.world\"),\n#       dataset=\"cannata/superstoreorders\", type=\"sql\",\n#       query=\"SELECT distinct NAME as City, STATE as Abbreviation,\n#       LATITUDE AS Latitude,\n#       LONGITUDE AS Longitude\n#       FROM bryon.`dhs-city-location-example`.`towns.csv/towns`\n#       where NAME in\n#       (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n#       order by NAME\",\n#       queryParameters = highDiscountCustomers$City\n#     ) # %>% View()\n#     # View(longLat)\n#     \n# # Step 6\n#     highDiscountCustomers2LongLat <- \n#       inner_join(highDiscountCustomers2, longLat, by = c(\"City\", \"Abbreviation\")) \n#     # View(highDiscountCustomers2LongLat)\n#     \n# # Step 7\n#     discounts <- \n#       inner_join(highDiscountCustomers2LongLat, highDiscounts, by=\"Order_Id\") # %>% View()\n#     # View(discounts)\n# \n#   OLDdiscounts <- query(\n#     data.world(propsfile = \"www/.data.world\"),\n#     dataset=\"cannata/superstoreorders\", type=\"sql\",\n#     query=\"SELECT Customer_Name as CustomerName, s.City as City, states.abbreviation as State, \n#     c.LATITUDE AS Latitude, \n#     c.LONGITUDE AS Longitude, \n#     Order_Id as OrderId, sum(Discount) as sumDiscount\n#     FROM SuperStoreOrders s join markmarkoh.`us-state-table`.`state_table.csv/state_table` states\n#     ON (s.State = states.name AND s.City = c.NAME) join\n#     bryon.`dhs-city-location-example`.`towns.csv/towns` c \n#     ON (states.abbreviation = c.STATE)\n#     WHERE Region != 'International'\n#     group by Customer_Name, s.City, states.abbreviation, c.LATITUDE, c.LONGITUDE, Order_Id -- Note the absence of LATITUDE and LONGITUDE\n#     having sum(Discount) between .3 and .9\"\n#   )  # %>% View()\n# } else {\n#   # Just faking one data point for now.\n#   Customer_Name = 'Wesley Tate'\n#   City = 'Chicago'\n#   State = 'Illinois'\n#   Order_Id = 48452\n#   Abbreviation = 'IL'\n#   Latitude =  41.85003\n#   Longitude = -87.65005\n#   sumDiscount = 0.34\n#   sumSales = 7124\n#   discounts <- data.frame(Customer_Name, City, State, Order_Id, Abbreviation, Latitude, Longitude, sumDiscount, sumSales)\n# }\n# \n# # The following query is for the Barcharts -> High Sales Customers tab data.\n# if(online0) {\n#   # Step 1:\n#   highDiscounts <- query(\n#     data.world(propsfile = \"www/.data.world\"),\n#     dataset=\"cannata/superstoreorders\", type=\"sql\",\n#     query=\"\n#     SELECT distinct Order_Id, sum(Discount) as sumDiscount\n#     FROM SuperStoreOrders\n#     group by Order_Id\n#     having sum(Discount) >= .3\"\n#   ) # %>% View()\n#   # View(highDiscounts)\n#   \n#   # Step 2\n#   sales <- query(\n#     data.world(propsfile = \"www/.data.world\"),\n#     dataset=\"cannata/superstoreorders\", type=\"sql\",\n#     query=\"\n#     select Customer_Id, sum(Profit) as sumProfit\n#     FROM SuperStoreOrders\n#     where Order_Id in \n#       (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n#     group by Customer_Id\",\n#     queryParameters = highDiscounts$Order_Id\n#     ) # %>% View()\n#   # View(sales)\n# } else {\n#   print(\"Getting discounts from csv\")\n#   file_path = \"www/SuperStoreOrders.csv\"\n#   df <- readr::read_csv(file_path) \n#   # Step 1\n#   highDiscounts <- df %>% dplyr::group_by(Order_Id) %>% dplyr::summarize(sumDiscount = sum(Discount)) %>% dplyr::filter(sumDiscount >= .3)\n#   # View(highDiscounts)\n#   # Step 2\n#   sales <- df %>% dplyr::filter(Order_Id %in% highDiscounts$Order_Id) %>% dplyr::select(Customer_Name, Customer_Id, City, State, Order_Id, Profit) %>% dplyr::group_by(Customer_Name, Customer_Id, City, State, Order_Id) %>% dplyr::summarise(sumProfit = sum(Profit))\n#   # View(sales)\n# }\n\n############################### Start shinyServer Function ####################\n\nshinyServer(function(input, output) {   \n  # # These widgets are for the Box Plots tab.\n  # online5 = reactive({input$rb5})\n  # output$boxplotRegions <- renderUI({selectInput(\"selectedBoxplotRegions\", \"Choose Regions:\",\n  #                                                region_list5, multiple = TRUE, selected='All') })\n  # \n  # # These widgets are for the Histogram tab.\n  # online4 = reactive({input$rb4})\n  # \n  # # These widgets are for the Scatter Plots tab.\n  # online3 = reactive({input$rb3})\n  \n  # These widgets are for the Crosstabs tab.\n  online1 = reactive({input$rb1})\n  KPI_Low = reactive({input$KPI1})     \n  KPI_Medium = reactive({input$KPI2})\n  \n  # These widgets are for the Barcharts tab.\n  online2 = reactive({input$rb2})\n  output$regions2 <- renderUI({selectInput(\"selectedRegions\", \"Choose Regions:\", region_list, multiple = TRUE, selected='All') })\n  \n  # Begin Box Plot Tab ------------------------------------------------------------------\n  # dfbp1 <- eventReactive(input$click5, {\n  #   if(input$selectedBoxplotRegions == 'All') region_list5 <- input$selectedBoxplotRegions\n  #   else region_list5 <- append(list(\"Skip\" = \"Skip\"), input$selectedBoxplotRegions)\n  #   if(online5() == \"SQL\") {\n  #     print(\"Getting from data.world\")\n  #     df <- query(\n  #       data.world(propsfile = \"www/.data.world\"),\n  #       dataset=\"cannata/superstoreorders\", type=\"sql\",\n  #       query=\"select Category, Sales, Region, Order_Date\n  #       from SuperStoreOrders\n  #       where (? = 'All' or Region in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))\",\n  #       queryParameters = region_list5 ) # %>% View()\n  #   }\n  #   else {\n  #     print(\"Getting from csv\")\n  #     file_path = \"www/SuperStoreOrders.csv\"\n  #     df <- readr::read_csv(file_path)\n  #     df %>% dplyr::select(Category, Sales, Region, Order_Date) %>% dplyr::filter(Region %in% input$selectedBoxplotRegions | input$selectedBoxplotRegions == \"All\") # %>% View()\n  #   }\n  #   })\n  # \n  # output$boxplotData1 <- renderDataTable({DT::datatable(dfbp1(), rownames = FALSE,\n  #                                               extensions = list(Responsive = TRUE, \n  #                                               FixedHeader = TRUE)\n  # )\n  # })\n  # \n  # dfbp2 <- eventReactive(c(input$click5, input$boxSalesRange1), {\n  #   dfbp1() %>% dplyr::filter(Sales >= input$boxSalesRange1[1] & Sales <= input$boxSalesRange1[2]) # %>% View()\n  # })\n  # \n  # dfbp3 <- eventReactive(c(input$click5, input$range5a), {\n  #   dfbp2() %>% dplyr::filter(lubridate::year(Order_Date) == as.integer(input$range5a) & lubridate::quarter(Order_Date) == (4 * (input$range5a - as.integer(input$range5a))) + 1) %>% dplyr::arrange(desc(Order_Date)) # %>% View()\n  # })\n  #   \n  # output$boxplotPlot1 <- renderPlotly({\n  #   #View(dfbp3())\n  #   p <- ggplot(dfbp3()) + \n  #     geom_boxplot(aes(x=Category, y=Sales, colour=Region)) + \n  #     ylim(0, input$boxSalesRange1[2]) +\n  #     theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))\n  #   ggplotly(p)\n  # })\n  # # End Box Plot Tab ___________________________________________________________\n  # \n  # # Begin Histgram Tab ------------------------------------------------------------------\n  # dfh1 <- eventReactive(input$click4, {\n  #   if(online4() == \"SQL\") {\n  #     print(\"Getting from data.world\")\n  #     query(\n  #       data.world(propsfile = \"www/.data.world\"),\n  #       dataset=\"cannata/superstoreorders\", type=\"sql\",\n  #       query=\"select Shipping_Cost, Container\n  #       from SuperStoreOrders\n  #       where Container = 'Small Box'\"\n  #     ) # %>% View()\n  #   }\n  #   else {\n  #     print(\"Getting from csv\")\n  #     file_path = \"www/SuperStoreOrders.csv\"\n  #     df <- readr::read_csv(file_path)\n  #     df %>% dplyr::select(Shipping_Cost, Container) %>% dplyr::filter(Container == 'Small Box') # %>% View()\n  #   }\n  #   })\n  # \n  # output$histogramData1 <- renderDataTable({DT::datatable(dfh1(), rownames = FALSE,\n  #                                                 extensions = list(Responsive = TRUE, \n  #                                                 FixedHeader = TRUE)\n  # )\n  # })\n  # \n  # output$histogramPlot1 <- renderPlotly({p <- ggplot(dfh1()) +\n  #     geom_histogram(aes(x=Shipping_Cost)) +\n  #     theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))\n  #     ggplotly(p)\n  # })\n  # # End Histogram Tab ___________________________________________________________\n  # \n  # # Begin Scatter Plots Tab ------------------------------------------------------------------\n  # dfsc1 <- eventReactive(input$click3, {\n  #   if(online3() == \"SQL\") {\n  #     print(\"Getting from data.world\")\n  #     query(\n  #       data.world(propsfile = \"www/.data.world\"),\n  #       dataset=\"cannata/status_sector_pop_income\", type=\"sql\",\n  #       query=\"select Sales, Profit, State\n  #       from SuperStoreOrders\n  #       where State = 'Texas' or State = 'Florida'\"\n  #     ) # %>% View()\n  #   }\n  #   else {\n  #     print(\"Getting from csv\")\n  #     file_path = \"../../../status_sector_pop_income.csv\"\n  #     df <- readr::read_csv(file_path)\n  #     df %>% dplyr::select(Sales, Profit, State) %>% dplyr::filter(State == 'Texas' | State == 'Florida') # %>% View()\n  #   }\n  # })\n  # output$scatterData1 <- renderDataTable({DT::datatable(dfsc1(), rownames = FALSE,\n  #                                                extensions = list(Responsive = TRUE, \n  #                                                FixedHeader = TRUE)\n  # )\n  # })\n  # output$scatterPlot1 <- renderPlotly({p <- ggplot(dfsc1()) + \n  #     theme(axis.text.x=element_text(angle=90, size=16, vjust=0.5)) + \n  #     theme(axis.text.y=element_text(size=16, hjust=0.5)) +\n  #     geom_point(aes(x=Sales, y=Profit, colour=State), size=2)\n  #     ggplotly(p)\n  # })\n  # End Scatter Plots Tab ___________________________________________________________\n  \n# Begin Crosstab Tab ------------------------------------------------------------------\n  dfct1 <- eventReactive(input$click1, {\n      if(online1() == \"SQL\") {\n        print(\"Getting from data.world\")\n        query(\n            data.world(propsfile = \"www/.data.world\"),\n            dataset=\"kolinkodm/s-17-dv-final-project\", type=\"sql\",\n            query=\"select Category, State, \n            sum(Profit) as sum_profit, \n            sum(Sales) as sum_sales, \n            sum(Profit) / sum(Sales) as ratio,\n            \n            case\n            when sum(Profit) / sum(Sales) < ? then '03 Low'\n            when sum(Profit) / sum(Sales) < ? then '02 Medium'\n            else '01 High'\n            end AS kpi\n            \n            from status_sector_pop_income inner join WorldHappiness on status_sector_pop_income.Country==WorldHappiness.Country\n            \n            where Country_Region = 'United States of America' and\n            Category in ('Chairs  and  Chairmats', 'Office Machines', 'Tables', 'Telephones and Communication')\n            group by Category, State\n            order by Category, State\",\n            queryParameters = list(KPI_Low(), KPI_Medium())\n          ) # %>% View()\n      }\n      else {\n        print(\"Getting from csv\")\n        file_path = \"../../../status_sector_pop_income.csv\"\n        df <- readr::read_csv(file_path)\n        df %>% \n          dplyr::filter(Country_Region == 'United States of America', Category %in% \n                          c('Chairs  and  Chairmats',\n                            'Office Machines',\n                            'Tables',\n                            'Telephones and Communication')) %>%\n          dplyr::group_by(Category, State) %>% \n          dplyr::summarize(sum_profit = sum(Profit), sum_sales = sum(Sales),\n                           ratio = sum(Profit) / sum(Sales),\n                           kpi = if_else(ratio <= KPI_Low(), '03 Low',\n                           if_else(ratio <= KPI_Medium(), '02 Medium', '01 High'))) # %>% View()\n      }\n  })\n  output$data1 <- renderDataTable({DT::datatable(dfct1(), rownames = FALSE,\n                                extensions = list(Responsive = TRUE, FixedHeader = TRUE)\n  )\n  })\n  output$plot1 <- renderPlot({ggplot(dfct1()) + \n    theme(axis.text.x=element_text(angle=90, size=16, vjust=0.5)) + \n    theme(axis.text.y=element_text(size=16, hjust=0.5)) +\n    geom_text(aes(x=Category, y=State, label=sum_sales), size=6) +\n    geom_tile(aes(x=Category, y=State, fill=kpi), alpha=0.50)\n  })\n# End Crosstab Tab ___________________________________________________________\n# Begin Barchart Tab ------------------------------------------------------------------\n  dfbc1 <- eventReactive(input$click2, {\n    if(input$selectedRegions == 'All') region_list <- input$selectedRegions\n    else region_list <- append(list(\"Skip\" = \"Skip\"), input$selectedRegions)\n    \n    if(online2() == \"SQL\") {\n      print(\"Getting from data.world\")\n      tdf = query(\n        data.world(propsfile = \"www/.data.world\"),\n        dataset=\"cannata/superstoreorders\", type=\"sql\",\n        query=\"select Category, Region, sum(Sales) sum_sales\n                from status_sector_pop_income\n                where ? = 'All' or Region in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n                group by Category, Region\",\n        queryParameters = region_list\n      ) # %>% View()\n    }\n    else {\n      print(\"Getting from csv\")\n      df <- read.csv(\"https://query.data.world/s/8ldef0v0krwipdz370clapefs\",header=T);\n      happiness <- read.csv(\"https://query.data.world/s/88vekrcjrwspq6tv46zfp5ued\",header=T);\n      joined <- dplyr::inner_join(df, happiness, by = \"Country\")\n      tdf = joined %>% dplyr::select(Region, Income.Class, Happiness.Score, Happiness.Rank) %>% \n                 dplyr::filter(Income.Class %in% c('High Income','Upper Middle Income','Lower Middle Income','Low Income')) %>% \n                 dplyr::group_by(Income.Class, Region) %>% \n                 dplyr::summarise(avg_scores = mean(Happiness.Score), avg_ranks = mean(Happiness.Rank),\n                                kpi = if_else(avg_ranks <= 33, '03 Low', if_else(avg_ranks <= 67, '02 Medium', '01 High')))\n    }\n    # The following two lines mimic what can be done with Analytic SQL. Analytic SQL does not currently work in data.world.\n    tdf2 = tdf %>% group_by(Income.Class) %>% summarize(window_avg_scores = mean(avg_scores))\n    df3 = dplyr::inner_join(tdf, tdf2, by = \"Income.Class\")\n  })\n  output$barchartData1 <- renderDataTable({DT::datatable(dfbc1(),\n                        rownames = FALSE,\n                        extensions = list(Responsive = TRUE, FixedHeader = TRUE) )\n  })\n  \n  output$barchartPlot1 <- renderPlot({ggplot(dfbc1(), aes(x=Region, y=avg_scores, fill=kpi)) +\n      scale_y_continuous(labels = scales::comma) + # no scientific notation\n      theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + \n      theme(axis.text.y=element_text(size=12, hjust=0.5)) +\n      geom_bar(stat = \"identity\") + \n      facet_wrap(~Income.Class, ncol=1) + \n      coord_flip() + \n      # Add sum_sales, and (sum_sales - window_avg_sales) label.\n      geom_text(mapping=aes(x=Region, y=avg_scores, label=round(avg_scores)),colour=\"black\", hjust=-.5) +\n      geom_text(mapping=aes(x=Region, y=avg_scores, label=round(avg_scores - window_avg_scores)),colour=\"blue\", hjust=-2) +\n      # Add reference line with a label.\n      geom_hline(aes(yintercept = round(window_avg_scores)), color=\"red\") +\n      geom_text(aes( -1, window_avg_scores, label = window_avg_scores, vjust = -.5, hjust = -.25), color=\"red\")\n  })\n  # End Barchart Tab ___________________________________________________________\n  \n})\n",
    "created" : 1493763297315.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "23931534",
    "id" : "205F0E8B",
    "lastKnownWriteTime" : 1493766803,
    "last_content_update" : 1493766803732,
    "path" : "~/DataVisualization/ShinyApp/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}