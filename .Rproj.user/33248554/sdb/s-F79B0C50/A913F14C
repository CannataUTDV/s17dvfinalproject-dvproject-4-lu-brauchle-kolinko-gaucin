{
    "collab_server" : "",
    "contents" : "# server.R\nrequire(ggplot2)\nrequire(dplyr)\nrequire(shiny)\nrequire(shinydashboard)\nrequire(data.world)\nrequire(readr)\nrequire(DT)\n\nfile_path = \"../../CSVs/WorldHappiness.csv\"\ndf <- readr::read_csv(file_path) \ntdf1 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(D = Region)\ntdf2 = df %>% dplyr::distinct(Region) %>% arrange(Region) %>% dplyr::rename(R = Region)\nregions = bind_cols(tdf1, tdf2)\n\nregion_list <- as.list(regions$D, regions$R)\nregion_list <- append(list(\"All\" = \"All\"), region_list)\n\n############################### Start shinyServer Function ####################\n\nshinyServer(function(input, output) {   \n  \n  #cons_states = c(\"AL\",\"AK\",\"ID\",\"KS\",\"MS\", \"CA\",\"MN\",\"OR\",\"RI\",\"WA\")\n  \n  # These widgets are for the Barcharts tab.\n  output$claim_types2 <- renderUI({selectInput(\"selectedRegions\", \"Choose regions:\", region_list, multiple = TRUE, selected='All') })\n  \n  # Begin Barchart Tab ------------------------------------------------------------------\n  \n  dfbc1 <- eventReactive(input$click2, {\n      if(input$selectedRegions == 'All') region_list <- input$selectedRegions\n      else region_list <- append(list(\"Skip\" = \"Skip\"), input$selectedRegions)\n      \n      file_path = \"../../CSVs/status_sector_pop_income.csv\"\n          df <- readr::read_csv(file_path) \n          file_path = \"../../CSVs/WorldHappiness.csv\"\n          happiness <- readr::read_csv(file_path) \n          joined <- dplyr::inner_join(df, happiness, by = \"Country\")\n          tdf <- joined %>% dplyr::select(Region, Income.Class, Happiness.Score, Happiness.Rank) %>% \n              dplyr::filter(Income.Class %in% c('High Income','Upper Middle Income','Lower Middle Income','Low Income')) %>% \n              dplyr::group_by(Income.Class, Region) %>% \n              dplyr::summarise(avg_scores = mean(Happiness.Score), avg_ranks = mean(Happiness.Rank),\n                               kpi = if_else(avg_ranks <= 33, '03 Low', if_else(avg_ranks <= 67, '02 Medium', '01 High')))\n      \n      # The following two lines mimic what can be done with Analytic SQL. Analytic SQL does not currently work in data.world.\n      tdf2 <- tdf %>% group_by(Income.Class) %>% summarize(window_avg_scores = mean(avg_scores))\n      dplyr::inner_join(tdf, tdf2, by = \"Income.Class\")\n  })\n  output$barchartData1 <- renderDataTable({DT::datatable(dfbc1(),\n                                                         rownames = FALSE,\n                                                         extensions = list(Responsive = TRUE, FixedHeader = TRUE) )\n  })\n  \n  output$barchartPlot1 <- renderPlot({ggplot(dfbc1(), aes(x=Region, y=avg_scores, fill=kpi)) +\n          scale_y_continuous(labels = scales::comma) + # no scientific notation\n          theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + \n          theme(axis.text.y=element_text(size=12, hjust=0.5)) +\n          geom_bar(stat = \"identity\") + \n          facet_wrap(~Income.Class, ncol=1) + \n          coord_flip() + \n          # Add sum_sales, and (sum_sales - window_avg_sales) label.\n          geom_text(mapping=aes(x=Region, y=avg_scores, label=round(avg_scores)),colour=\"black\", hjust=-.5) +\n          geom_text(mapping=aes(x=Region, y=avg_scores, label=round(avg_scores - window_avg_scores)),colour=\"blue\", hjust=-2) +\n          # Add reference line with a label.\n          geom_hline(aes(yintercept = round(window_avg_scores)), color=\"red\") +\n          geom_text(aes( -1, window_avg_scores, label = window_avg_scores, vjust = -.5, hjust = -.25), color=\"red\")\n  })\n})",
    "created" : 1493766662832.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1883825531",
    "id" : "A913F14C",
    "lastKnownWriteTime" : 1493767375,
    "last_content_update" : 1493767375750,
    "path" : "~/DataVisualization/Barchart/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}